{"version":3,"sources":["components/EmployeeTable.jsx","utils/API.js","pages/UserDirectory.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","employees","className","map","employee","i","key","name","first","last","email","href","phone","src","picture","thumbnail","alt","axios","get","UserDirectory","state","filteredEmployees","sortOrder","API","then","res","setState","data","results","filteredResult","length","this","filter","toLowerCase","includes","value","onChange","ev","filterEmployeesByFirstName","target","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+RAmCeA,EAhCO,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEpB,OACI,6BACI,2BAAOC,UAAU,iBACb,+BACA,4BACI,oCACA,qCACA,qCACA,uCAGJ,+BAEHD,EAAUE,KAAI,SAACC,EAASC,GAAV,OACX,wBAAIC,IAAKD,GACL,4BAAKD,EAASG,KAAKC,MAAnB,IAA2BJ,EAASG,KAAKE,MACzC,4BAAKL,EAASM,OACd,4BAAI,uBAAGC,KAAM,SAAWP,EAASQ,OAA7B,gBAAwCR,EAASQ,QACrD,4BAAI,yBAAKC,IAAKT,EAASU,QAAQC,UAAWC,IAAI,mB,iBCrBnD,aAEP,OAAOC,IAAMC,IAAI,0CCgDVC,E,4MA/CXC,MAAQ,CACJnB,UAAU,GACVoB,kBAAkB,GAClBC,WAAU,G,kEAEM,IAAD,OAEfC,IAAsBC,MAAK,SAAAC,GACvB,EAAKC,SAAS,CACVzB,UAAWwB,EAAIE,KAAKC,QACpBP,kBAAmBI,EAAIE,KAAKC,e,iDAKbrB,GACvB,IAAIsB,EAEAA,EADDtB,EAAKuB,OAAS,EACIC,KAAKX,MAAMnB,UAAU+B,QAAO,SAAA5B,GAEzC,OAAOA,EAASG,KAAKC,MAAMyB,cAAcC,SAAS3B,EAAK0B,kBAI1CF,KAAKX,MAAMnB,UAGhC8B,KAAKL,SAAS,CAACL,kBAAkBQ,M,+BAG5B,IAAD,OAEJ,OACI,6BACI,2BAAOM,MAAOJ,KAAKX,MAAMY,OAAQI,SAAU,SAAAC,GAAE,OAAI,EAAKC,2BAA2BD,EAAGE,OAAOJ,UAE3F,kBAAC,EAAD,CAAelC,UAAW8B,KAAKX,MAAMC,yB,GArCzBmB,aCUbC,MATf,WACE,OACE,yBAAKvC,UAAU,OAEb,kBAAC,EAAD,QCGcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cf38c3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst EmployeeTable = ({employees}) => {\r\n    \r\n    return (\r\n        <div>\r\n            <table className=\"table-wrapper\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Phone</th>\r\n                    <th>Image</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n            \r\n            {employees.map((employee,i) => (\r\n                <tr key={i}>\r\n                    <td>{employee.name.first} {employee.name.last}</td>\r\n                    <td>{employee.email}</td>\r\n                    <td><a href={'phone:' + employee.phone}>ðŸ“± {employee.phone}</a></td>\r\n                    <td><img src={employee.picture.thumbnail} alt=\"image\"/></td>\r\n                </tr>\r\n                \r\n\r\n                \r\n            ))}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmployeeTable;","import axios from 'axios';\r\n\r\nexport default {\r\n    getAllEmployees(){\r\n        return axios.get('https://randomuser.me/api/?results=60');\r\n        \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport EmployeeTable from '../components/EmployeeTable';\r\nimport API from '../utils/API';\r\n\r\nclass UserDirectory extends Component{\r\n    state = {\r\n        employees:[],\r\n        filteredEmployees:[],\r\n        sortOrder:false\r\n    };\r\n    componentDidMount(){\r\n        // api call\r\n        API.getAllEmployees().then(res => {\r\n            this.setState({\r\n                employees: res.data.results,\r\n                filteredEmployees: res.data.results\r\n            })\r\n            \r\n        })\r\n    }\r\n    filterEmployeesByFirstName(name){\r\n        let filteredResult;\r\n        if(name.length > 0){\r\n            filteredResult = this.state.employees.filter(employee => {\r\n                \r\n                return employee.name.first.toLowerCase().includes(name.toLowerCase())\r\n            })\r\n            \r\n        } else {\r\n            filteredResult = this.state.employees;\r\n        }\r\n        \r\n        this.setState({filteredEmployees:filteredResult});\r\n    }\r\n    \r\n    render(){\r\n        \r\n        return (\r\n            <div>\r\n                <input value={this.state.filter} onChange={ev => this.filterEmployeesByFirstName(ev.target.value)}/>\r\n                \r\n                <EmployeeTable employees={this.state.filteredEmployees} />\r\n                \r\n                {/* filter / search */}\r\n                {/* employee table (component) */}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n    \r\n};\r\n\r\nexport default UserDirectory;","import React from 'react';\n\nimport './App.css';\nimport UserDirectory from './pages/UserDirectory';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <UserDirectory/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}